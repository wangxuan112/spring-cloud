server.port=8080
spring.main.allow-bean-definition-overriding=true
#mybatis-plus
mybatis-plus.mapper-locations=classpath:mapper/*.xml
mybatis-plus.type-aliases-package=com.xuan.spring.boot.sharding.jdbc.common.model
mybatis-plus.configuration.map-underscore-to-camel-case=true

spring.shardingsphere.datasource.names=ds0,ds1,dm2,ds2

spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://47.103.25.169:3306/db_1?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://47.103.25.169:3306/db_2?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

spring.shardingsphere.datasource.dm2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dm2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.dm2.url=jdbc:mysql://47.103.25.169:3306/orders?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.dm2.username=root
spring.shardingsphere.datasource.dm2.password=123456

#slave
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://47.103.25.169:3307/orders?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456


#读写分离配置
spring.shardingsphere.masterslave.name=ms2
spring.shardingsphere.masterslave.master-data-source-name=dm2
spring.shardingsphere.masterslave.slave-data-source-names=ds2
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
#t_order表分库策略
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
#数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{0..1}
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ms2.t_user
#分表策略
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{id % 2 +1}
##t_user表未分表也需要配置策略
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

#公共表
spring.shardingsphere.sharding.broadcast-tables=t_dict

##分表时需要主键不能重复，这里指定主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
##这里指定主键的生成方式（SNOWFLAKE）
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.props.sql.show=true